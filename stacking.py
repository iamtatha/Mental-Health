# -*- coding: utf-8 -*-
"""Stacking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kGiNtL5aouSbhY9QJ7hHir7w7Sh5P1fA
"""

pip install mlrose

pip install mlxtend

import six
import sys
sys.modules['sklearn.externals.six'] = six
import mlrose

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import StackingClassifier
import keras
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestRegressor, AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.decomposition import PCA
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB 
from mlxtend.classifier import StackingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

def stacking():
  X_values = pd.read_csv('https://raw.githubusercontent.com/iamtatha/Mental-Health/main/Data/train.csv')
  Y_values = pd.read_csv('https://raw.githubusercontent.com/iamtatha/Mental-Health/main/Data/target.csv')

  df = pd.concat([X_values, Y_values],axis=1)

  scaled_data = df
  scaler = MinMaxScaler(feature_range=(0,1))
  scaled_data = pd.DataFrame(scaler.fit_transform(scaled_data))

  X_train, X_test, Y_train, Y_test = train_test_split(scaled_data.iloc[:,:-1], scaled_data.iloc[:,-1], train_size=0.70)
  
  
  clf1 = KNeighborsClassifier(n_neighbors=19)
  # clf2 = RandomForestClassifier(random_state=1)
  clf2 = GaussianNB()
  clf3 = SVC(kernel='rbf', random_state = 1, gamma='auto', probability=True)
  lr = LogisticRegression()
  stack = StackingClassifier(classifiers=[clf1, clf2, clf3], meta_classifier=lr)
  stack.fit(X_train, Y_train)
      
  # make class predictions for the testing set
  y_pred_train = stack.predict(X_train)
  y_pred_test = stack.predict(X_test)

  print("Stacking for train data:",accuracy_score(Y_train,y_pred_train))
  print("Stacking for test data:",accuracy_score(Y_test,y_pred_test))

stacking()
